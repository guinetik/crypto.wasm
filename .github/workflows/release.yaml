name: Build and Release

on:
  push:
    tags:
      - "v*" # Triggers the workflow when a tag starting with "v" is pushed (e.g., v1.0.0)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      # Add WebAssembly target
      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      # Install wasm-pack
      - name: Install wasm-pack
        run: cargo install wasm-pack

      # Install Terser (for minifying JavaScript)
      - name: Install Terser
        run: npm install -g terser

      # Run tests
      - name: Run tests
        run: cargo test

      # Build the WebAssembly module
      - name: Build WebAssembly
        run: |
          wasm-pack build --target web --out-dir build/crypto_wasm
          terser build/crypto_wasm/crypto_wasm.js -o build/crypto_wasm/crypto_wasm.lib.min.js --compress --mangle
          terser js/crypto_wasm.js -o build/crypto_wasm/crypto_wasm.min.js --compress --mangle

      # Build the CLI app
      - name: Build CLI
        run: cargo build --release

      # Package the distribution files
      - name: Package distribution
        run: |
          mkdir -p dist/crypto_wasm
          cp build/crypto_wasm/crypto_wasm.lib.min.js dist/crypto_wasm/
          cp build/crypto_wasm/crypto_wasm_bg.wasm dist/crypto_wasm/
          cp build/crypto_wasm/crypto_wasm.min.js dist/crypto_wasm/
          mkdir -p dist/cli
          cp target/release/crypto_wasm_cli dist/cli/

      # Upload WebAssembly artifacts (using v4)
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-wasm
          path: dist/crypto_wasm/

      # Upload CLI artifacts (using v4)
      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-cli
          path: dist/cli/

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Download WebAssembly artifacts
      - name: Download WebAssembly artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts-wasm
          path: dist/crypto_wasm/

      # Download CLI artifacts
      - name: Download CLI artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts-cli
          path: dist/cli/

      # Create a GitHub release
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload WebAssembly assets to the release
      - name: Upload WebAssembly assets (lib.min.js)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/crypto_wasm/crypto_wasm.lib.min.js
          asset_name: crypto_wasm.lib.min.js
          asset_content_type: application/javascript

      - name: Upload WebAssembly assets (min.js)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/crypto_wasm/crypto_wasm.min.js
          asset_name: crypto_wasm.min.js
          asset_content_type: application/javascript

      - name: Upload WebAssembly assets (wasm)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/crypto_wasm/crypto_wasm_bg.wasm
          asset_name: crypto_wasm_bg.wasm
          asset_content_type: application/wasm

      # Upload CLI binary to the release
      - name: Upload CLI assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/cli/crypto_wasm_cli
          asset_name: crypto_wasm_cli
          asset_content_type: application/octet-stream
